# Program Author: Dylan Weakly
# Program Date: 11/12/2024
# Program Title: audio_enhancements_app.py
from pydub import AudioSegment
from pydub.playback import play
import matplotlib.pyplot as plt
import numpy as np
import wave
import time

# Initialize audio1 files

audio1 = AudioSegment.from_file("timer.wav")
audio1_justname = "timer.wav"
# Initialize audio2 files
audio2 = AudioSegment.from_file("Windows XP Startup.wav")
audio2_justname = "Windows XP Startup.wav"

# Func to plot wav file after audio enhancement is complete - PARTIALLY GENERATED BY CHATGPT TO HANDLE STEREO AUDIO
def plot_full_audio(file_name):
    obj2 = wave.open(file_name, 'rb')

    # Read audio properties
    signal_wave = obj2.readframes(-1)
    sample_freq = obj2.getframerate()
    n_samples = obj2.getnframes()
    n_channels = obj2.getnchannels()

    obj2.close()

    # Calculate the total duration of the audio in seconds
    t_audio = n_samples / sample_freq

    # Convert the audio to a numpy array
    signal_array = np.frombuffer(signal_wave, dtype=np.int16)

    # Handle stereo audio by reshaping and selecting one channel
    if n_channels == 2:
        signal_array = signal_array.reshape(-1, 2)
        signal_array = signal_array[:, 0]  # Use the first channel for plotting

    # Generate time values for the x-axis
    times = np.linspace(0, t_audio, num=len(signal_array))

    # Plotting
    plt.figure(figsize=(12, 6))
    plt.plot(times, signal_array)
    plt.title("WAV File Result")
    plt.ylabel("Audio Signal")
    plt.xlabel("Time (s)")
    plt.xlim(0, t_audio)
    plt.show()

# Func to handle plotting of certain indexes of audio
def plot_indexed_audio(file_name, start_time, end_time):
    obj2 = wave.open(file_name, 'rb')

    # Read audio properties
    signal_wave = obj2.readframes(-1)
    sample_freq = obj2.getframerate()
    n_channels = obj2.getnchannels()

    obj2.close()

    # Convert the audio to a numpy array
    signal_array = np.frombuffer(signal_wave, dtype=np.int16)

    # Handle stereo audio by reshaping and selecting one channel
    if n_channels == 2:
        signal_array = signal_array.reshape(-1, 2)
        signal_array = signal_array[:, 0]  # Use the first channel for plotting

    # Calculate start and end sample indices for the specified time range
    start_sample = int(start_time * sample_freq)
    end_sample = int(end_time * sample_freq)

    # Extract the specified portion of the audio
    indexed_signal = signal_array[start_sample:end_sample]

    # Generate time values for the x-axis of the indexed portion
    times = np.linspace(start_time, end_time, num=len(indexed_signal))

    # Plotting the indexed portion
    plt.figure(figsize=(12, 6))
    plt.plot(times, indexed_signal)
    plt.title(f"WAV File Result from {start_time} to {end_time} seconds")
    plt.ylabel("Audio Signal")
    plt.xlabel("Time (s)")
    plt.xlim(start_time, end_time)
    plt.show()

# Func to have user decide which audio they want to deal with in the particular operation
def which_audio(sel: int):
    which_audio_sel = int(input(f"Which audio do you want to use for operation #{sel} (Enter 1 or 2): "))
    try:
        if which_audio_sel == 1:
            return audio1, audio1, "timer.wav"
        if which_audio_sel == 2:
            return audio2, audio2, "Windows XP Startup.wav"
        else:
            raise ValueError
    except ValueError:
        print("Please enter a valid input (1 or 2).")
        return None, None

# Func to offer user ability to continue making operations without rerunning
def another_operation():
    print("\n\nWould you like to complete another operation?\n"
                          "Enter Y for Yes\n"
                          "Enter N for No")
    question: str = input("Your choice: ")
    q_cf = question.casefold()
    if q_cf == "y":
        print("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n")
        user_menu_functionality()
    else:
        exit(0)

# Func for user menu and conditionals
def user_menu_functionality():
    print("\n ------------------------------------------------- \n"
          "| Enter 1 to:        Play Multiple Audios at Once |\n"
          "| Enter 2 to:   Increase Any Audio by 40 decibels |          ################################################\n"
          "| Enter 3 to:           Get Duration of Any Audio |          ##  Audio 1 is a sample ten second countdown. ##\n"
          "| Enter 4 to:                   Fade Any Audio in |          ##  Audio 2 is the Windows XP boot-up sound.  ##\n"
          "| Enter 5 to:   Index Audio 2 from 1 sec to 2 sec |          ################################################\n"
          "| Enter 6 to:           Update Audio 1 Frame Rate |\n"
          " -------------------------------------------------")

    sel = int(input("\n                                                  YOUR CHOICE\n"  
                    "                                                    ------>  "))

    try:
        if sel == 1:
            multiple_tracks()
        elif sel == 2:
            selected_audio, name, text_name = which_audio(sel)
            if selected_audio:
                up_vol(selected_audio, name, text_name)
        elif sel == 3:
            selected_audio, name, text_name = which_audio(sel)
            if selected_audio:
                duration(selected_audio, name, text_name)
        elif sel == 4:
            selected_audio, name, text_name = which_audio(sel)
            if selected_audio:
                fading_in(selected_audio, name, text_name)
        elif sel == 5:
            index_duration()
        elif sel == 6:
            update_frame_rate()
        else:
            raise ValueError
    except ValueError:
        print("You must enter input 1-6.")


# 1: Func to run both audio tracks simultaneously
def multiple_tracks():
    combined_audio = audio1[:11000].overlay(audio2)
                            # Original audio indexed for the sake of time (Long audio file)
    combined_audio.export("audio_for_multiple_tracks.wav", format="wav")
    combined_audio_for_plot = "audio_for_multiple_tracks.wav"
    print("\nPlaying Original Audio.")
    play(audio1[:11000])
    print("Playing Audio combined with another audio file (Win XP Startup Sound).")
    play(combined_audio)
    print("Displaying Plot.")
    plot_full_audio(combined_audio_for_plot)

# 2: Func for increasing volume of any audio
def up_vol(audio_for_use: AudioSegment, audio_text_name: AudioSegment, text_name: str):
    audio_up = audio_text_name + 40
    print("\nPlaying Original Audio *LOUD WARNING NEXT!!!!")
    play(audio_for_use[:11000])
    print("Playing audio turned up by 40 decibels")
    play(audio_up[:11000])
    print("Displaying Plot.")
    plot_full_audio(text_name)

# 3: Func for getting the duration of any audio
def duration(audio_for_use: AudioSegment, audio_text_name: AudioSegment, text_name: str):
    print(f"The audio is {audio_for_use[:11000].duration_seconds:.2f} seconds long.")
    print("Displaying Plot.")
    if text_name == 'timer.wav':
        plot_indexed_audio(text_name, 0, 11)
    elif text_name == 'Windows XP Startup.wav':
        plot_full_audio(text_name)

# 4: Func for fading in any audio in 3 sec
def fading_in(audio_for_use: AudioSegment, audio_text_name: AudioSegment, text_name: str):
    if audio_for_use is None or audio_text_name is None:
        print("Invalid audio selection. Cannot proceed with fading in.")
        return
    len_aud = 0
    print("\nPlaying Original Audio.")
    play(audio_for_use[:11000])
    print(f"Playing audio fading in for 3 seconds.")
    play(audio_for_use[:11000].fade_in(3000))
    print("Displaying Plot.")
    plot_full_audio(text_name)

# 5: Func for indexing duration of audio 2
def index_duration():
    print("\nPlaying Original Audio.")
    play(audio2)
    print("Playing indexed audio from 1 sec to 2 sec.")
    play(audio2[1000:2000])
    print("Displaying Plot.")
    plot_indexed_audio(audio1_justname, 1, 2)

# 6: Func for setting new frame rate for audio 2
def update_frame_rate():
    obj = wave.open(audio2_justname, 'r')
    print("\nPlaying Original Audio...")
    play(audio2)
    print(f"The Current Frame Rate is {obj.getframerate()}")

    new_frame_rate = int(input("Enter the new frame rate: "))
    updated_audio = audio2.set_frame_rate(new_frame_rate)
    print(f"The updated Frame Rate is {new_frame_rate}.")

    updated_audio.export("updated_audio_2.wav", format="wav")
    time.sleep(2)
    print("Playing updated audio.")
    play(updated_audio[:11000])
    print("Displaying Plot.")
    new_file = "updated_audio_2.wav"
    plot_indexed_audio(new_file, 0, 12)

# Main func
def main():
    print("\n                                      ------- AUDIO ENHANCEMENTS APP -------\n"
        "                                      |     Created by Dylan C. Weakly     |\n"
        "                                      |    for Programming I -- Java       |\n"
        "                                      |       on 19 November 2024          |\n")
    user_menu_functionality()
    another_operation()

# Run mainline
main()

# End of program
